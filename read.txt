read.txt

:Author: kalipy
:Email: kalipy@debian
:Date: 2020-12-05 15:52

持久化
    数据持久化
        内存:断点即失
    
    为什么需要持久化?
        内存太贵

持久层
    Dao层 Service层 Controller层..
    完成持久化工作的代码块

为什么需要Mybatis?
    方便
    传统的jdbc代码太复杂。简化。框架。自动化
    不用mybatis也可以，只是更容易上手

    优点：
        简单
        灵活
        sql和代码分离，提高了可维护性
        提供映射标签，支持对象与数据库的orm字段关系映射
        提供对象关系映射标签，支持对象关系组建维护
        提供xml标签，支持编写动态sql

    最重要一点：
        使用的人多

--------------------------------------------------------------------------

思路：环境搭建-->导入mybatis-->test

搭建mysql(建库建表):
    1.CREATE database `mybatis`;
    
    2.use `mybatis`;
    
    3.create table `user`(
    	`id` int(20) not null primary key,
    	`name` varchar(30) default null,
    	`pwd` varchar(30) default null
    )engine=innodb default charset=utf8;
    
    4,insert into `user` (`id`, `name`, `pwd`) values
    (1, '狂神', '123456'),
    (2, '张三', '123456'),
    (3, 'hanser', '345545')


新建项目:
    导入依赖
        compile "mysql:mysql-connector-java:8.0.21"
        compile "org.mybatis:mybatis:3.5.3"
        testImplementation 'junit:junit:4.13'

    注意mysql8.0驱动写法：
        jdbc:mysql://10.7.37.212:3306/mybatis?&useSSL=false&serverTimezone=UTC 
        jdbc:mysql://localhost:3306/数据库?useSSL=false&serverTimezone=UTC&characterEncoding=utf-8l

    编写xml

    编写mybatis工具类

    编写代码
        实体类
            class User

        Dao接口
            interface UserDao

        接口实现类
            由原来在javaweb时候的UserDaoImpl转变为一个更简单的Mapper配置文件
                xxMapper.xml
---------------------------------------------------------------------------

类型别名(aliases)
    减少类完全限定名的冗余

    <!-- 给实体类起别名 -->
    <typeAliases>
        <typeAlias type="com.kuang.pojo.User" alias="User" />
    </typeAliases>

    也可以指定一个包名，mybatis会在包名下搜索需要的javaBean,比如：
    扫描实体类的包，它的默认别名就是这个类的类名，首字母小写!!!
        <!-- 给实体类起别名 -->
        <typeAliases>
            <package name="com.kuang.pojo" />
        </typeAliases>

    在实体类比较少的情况下，使用第一种
    如果实体类很多，建议第二种

    第一种可以diy别名，第二种不成,如果非要改名，需要在实体类上加注解
        @Alias("xxx")
        public class User

-----------------------------------------------------------------------------

映射器(mappers)
MapperRegistry:注册绑定我们的Mapper文件
    方式一(推荐):
        <!-- 每一个Mapper.xml都需要在mybatis核心文件中注册 -->
        <mappers>
            <mapper resource="com/kuang/dao/UserMapper.xml" />
        </mappers>

    方式二:使用class文件绑定注册
        <!-- 每一个Mapper.xml都需要在mybatis核心文件中注册 -->
        <mappers>
            <mapper class="com.kuang.dao.UserMapper" />
        </mappers>
    
    方式三:使用包扫描进行绑定注册
        <!-- 每一个Mapper.xml都需要在mybatis核心文件中注册 -->
        <mappers>
            <package name="com.kuang.dao" />
        </mappers>

    注意(规范)：
        接口和他的Mapper配置文件必须同名
        接口和他的Mapper配置文件必须在同一个包下

        如果想分离，只需要在resource下建和接口所在相同的包即可
-----------------------------------------------------------------------------

生命周期及作用域(至关重要，因为错误的使用会导致严重的并发问题):

            mybatis-config.xml配置
                    |
                    |
                   \|/
开始--->SqlSessionFactoryBuilder---->SqlSessionFactory
                                            |
                                            |
                                           \|/
             结束<-------Sql Mapper<----SqlSession
             ^                              |
             |                              |
              ------------------------------

SqlSessionFactoryBuilder:
    一旦创建了SqlSessionFactory，就不再需要它了
    局部变量

SqlSessionFactory:
    可以想象为连接池
    SqlSessionFactory一旦被创建就应该在运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。
    因此SqlSessionFactory的最佳作用域是应用作用域
    最简单的就是使用单例模式或静态单例模式

SqlSession:
    连接到连接池的一个请求
    SqlSession的实例不是线程安全的，因此不能被共享，所以最佳作用域是请求或方法作用域
    用完之后要赶紧关闭，否则资源被占用


                         ---------->SqlSession     ------->Mapper
                        |                         |
                        |                         |
sqlSessionFactory------- ---------->SqlSession---- ------->Mapper
                        |                         |
                        |                         |
                         ---------->SqlSession     -------->Mapper
这里的每一个Mapper,就代表一个具体的业务

-----------------------------------------------------------------------------

ResultMap结果集
    解决属性名和字段名不一致的问题(原因，数据库字段不区分大小写)
    
    方法一：
        select pwd as password...起别名

    方法二：
        resultMap
            resultMap元素是mybatis中最重要最强大的元素
            对于简单的语句根本不用配置显式的结果映射，而对于复杂的语句只要描述他们的关系即可
            最优秀的地方在于，根本不需要显式的用它
-----------------------------------------------------------------------------

日志(log4j stdout_logging)
日志工厂
    
    在mybatis中具体使用哪个日志实现，在设置中配置
    stdout_logging标准日志输出

    log4j:
        1.导包
        
        2.resources目录下新建文件,log4j.properties:
            #将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码
            log4j.rootLogger=DEBUG,console,file
            
            #控制台输出的相关设置
            log4j.appender.console = org.apache.log4j.ConsoleAppender
            log4j.appender.console.Target = System.out
            log4j.appender.console.Threshold=DEBUG
            log4j.appender.console.layout = org.apache.log4j.PatternLayout
            log4j.appender.console.layout.ConversionPattern=[%c]-%m%n
            
            #文件输出的相关设置
            log4j.appender.file = org.apache.log4j.RollingFileAppender
            log4j.appender.file.File=./log/kuang.log
            log4j.appender.file.MaxFileSize=10mb
            log4j.appender.file.Threshold=DEBUG
            log4j.appender.file.layout=org.apache.log4j.PatternLayout
            log4j.appender.file.layout.ConversionPattern=[%p][%d{yy-MM-dd}][%c]%m%n
            
            #日志输出级别
            log4j.logger.org.mybatis=DEBUG
            log4j.logger.java.sql=DEBUG
            log4j.logger.java.sql.Statement=DEBUG
            log4j.logger.java.sql.ResultSet=DEBUG
            log4j.logger.java.sql.PreparedStatement=DEBUG

        3.配置log4j为日志的实现
            <settings>
                <setting name="logImpl" value="LOG4J" />
            </settings>
        
        4.Log4j使用

-----------------------------------------------------------------------

分页(limit)：
为什么要分页?
    提高查询效率

使用mybatis实现分页,核心sql
    1.接口
    2.Mapper.xml
    3.test
-----------------------------------------------------------------------

使用注解开发
    本质：反射机制
    底层：动态代理
-------------------------------------------------------------------------

mybatis执行流程：
        
        Resources获取加载全局配置文件
                |
                |
               \|/
        实例化SqlSessionFactoryBuilder构造器
                |
                |
               \|/
         解析配置文件流XMLConfigBuilder
                |
                |
               \|/
            Configration所有的配置信息
                |
                |
               \|/
             transactional事务管理<---------------------
                |                                       ^
                |                                       |
               \|/                                      |
               executor执行器                           |
                |                                       |
                |                                       |
               \|/                                      |
            创建sqlSession                              |
                |                                       |
                |                                       |
               \|/                                      |
            实现crud----------------------------------->
                |
                |
               \|/
               提交事务
                |
                |
               \|/
               关闭
-----------------------------------------------------------------------

使用注解开发
    本质：反射机制
    底层：动态代理

    注意：
        必须将接口注册绑定到核心配置文件

        关于@Param()注解
            基本类型的参数或String类型，需要加上
            应用类型不需要
            如果只有一个基本类型的话，可以不加，但是建议加上
            我们在sql语句中引用#{"xx"}的是@Param中设定的属性名

CRUD
    我们可以在工具类创建的时候实现自动提交事务
-----------------------------------------------------------------------

Lombok

什么是lombok?
    
lombok的主要作用是通过注解自动生成getter和setter方法,构造器、equals方法、或者hash方法

    gradle导入jar包
    开发用：
        compileOnly 'org.projectlombok:lombok:1.18.4'
        annotationProcessor 'org.projectlombok:lombok:1.18.4'
    测试用：
        testCompileOnly 'org.projectlombok:lombok:1.18.4'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.4'

使用：
@Data
@AllArgsConstructor 
@NoArgsConstructor
@ToString
    
-----------------------------------------------------------------------

复杂查询环境搭建：
    建sql表
        
        1.CREATE TABLE `teacher` (
          `id` INT(10) NOT NULL,
          `name` VARCHAR(30) DEFAULT NULL,
          PRIMARY KEY (`id`)
        ) ENGINE=INNODB DEFAULT CHARSET=utf8
         
        2.INSERT INTO teacher(`id`, `name`) VALUES (1, '秦老师');
         
        3.CREATE TABLE `student` (
          `id` INT(10) NOT NULL,
          `name` VARCHAR(30) DEFAULT NULL,
          `tid` INT(10) DEFAULT NULL,
          PRIMARY KEY (`id`),
          KEY `fktid` (`tid`),
          CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher` (`id`)
        ) ENGINE=INNODB DEFAULT CHARSET=utf8
         
         
      4.INSERT INTO `student` (`id`, `name`, `tid`) VALUES ('1', '小明', '1');
        INSERT INTO `student` (`id`, `name`, `tid`) VALUES ('2', '小红', '1');
        INSERT INTO `student` (`id`, `name`, `tid`) VALUES ('3', '小张', '1');
        INSERT INTO `student` (`id`, `name`, `tid`) VALUES ('4', '小李', '1');
        INSERT INTO `student` (`id`, `name`, `tid`) VALUES ('5', '小王', '1');

mkdir src/main/resources/com/kuang/dao -p

------------------------------------------------------------------------
一对多
比如：一个老师教多个学生

1.环境搭建

